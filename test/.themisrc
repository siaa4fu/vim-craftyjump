vim9script
scriptencoding utf-8

themis#option('runtimepath', fnamemodify(expand('<sfile>'), ':h:h'))
const g:Expect = themis#helper('expect')

# @param {list} expect - [lnum, charcol] of expected position
#   the column number is a 1-based character index, not a byte index
#   alternatively, the column number can be specified using following strings
#     '0'  - the first character of the line
#     '^'  - the first non-blank character of the line
#     '$'  - the last character of the line
#     'g_' - the last non-blank character of the line
themis#helper#expect#define_matcher('to_be_at_position',
  (_, expect) => {
    const pos = getcursorcharpos()
    var charcol: number
    if type(expect[1]) == v:t_string
      # temporarily move the cursor to the expected position
      execute 'normal!' expect[0] .. 'gg' .. expect[1]
      charcol = charcol('.')
      setcharpos('.', pos)
    endif
    return pos[1 : 2] ==# [expect[0], charcol ?? expect[1]]
  },
  (not, name, _, expect) =>
    'Expected the cursor position ' .. (not ? 'not ' : '') .. 'to be at ' .. string(expect) .. '.'
    .. ' (but ' .. string(getcursorcharpos()[1 : 2]) .. ')'
)
def g:DotRepeat(expect: string)
  # @param {string} expect - after repeating last command, check if the current line is equal to {expect}
  normal! .
  g:Expect(getline('.')).to_equal(expect)
enddef

def g:InitTestBuffer(lines: list<string>)
  # @param {list<string>} lines - set lines in the test buffer
  new | only!
  for lnum in range(1, len(lines))
    setline(lnum, lines[lnum - 1])
  endfor
enddef
def g:GetIndices(posline: string, isForward: bool, isExSelEnd: bool, skipInitPos: bool): list<number>
  # @param {string} posline - the line that indicates where the cursor is expected to move
  # @param {bool} isForward - return indices if the cursor moves forward, reversed indices if backward
  # @param {bool} isExSelEnd - whether the cursor is at the end of the exclusive selection
  # @param {bool} skipInitPos - whether to skip an initial position if the cursor will move from it first
  # @return {list<number>} - the list of a character index represented by charcol()
  final indices = []
  const Put = function(isForward ? 'add' : 'insert', [indices])
  # the signs in the posline indicate types of cursor movements as follows
  #   # - the cursor normally goes to the signed position
  #   + - in visual mode, the cursor always goes to just after the signed position
  #   * - if the cursor is at the end of the exclusive selection, it goes to just after the signed position
  #       if not, to the signed position
  const ptn_signs = '[#+*]'
  const ptn_offsetsigns = mode() =~# "[vV\<C-v>]" ? isExSelEnd ? '[+*]' : '[+]' : '[]'
  var pos = matchstrpos(posline, ptn_signs) # 0-based byte index
  while pos[0] !=# ''
    # matchstrpos(...)[1] gives the 0-based byte index of the starting position of the match
    Put(charidx(posline, pos[1]) + (pos[0] =~# ptn_offsetsigns ? 1 : 0) + 1) # convert 0-based character index to 1-based character index
    pos = matchstrpos(posline, ptn_signs, pos[2])
  endwhile
  if skipInitPos && get(indices, 0, -1) == (isForward ? 1 : strcharlen(posline))
    # skip an initial position
    remove(indices, 0)
  endif
  return indices
enddef
def g:MoveInLine(lnum: number, indices: list<number>, keyToMove: string, isForward: bool): number
  # @param {number} lnum - the line number of the line that cursor moves
  # @param {list<number>} indices - positions where the cursor is expected to move
  # @param {string} keyToMove - the key to move the cursor
  # @param {bool} isForward - true if the key motion is forward, false if backward
  # @return {number} - next line number
  # skip if the line is blank
  if getline(lnum) !=# ''
    # move the cursor and check if the movement to each index is correct
    for index in indices
      execute 'normal' keyToMove
      g:Expect(v:null).to_be_at_position([lnum, index])
    endfor
  endif
  return lnum + (isForward ? 1 : -1)
enddef
