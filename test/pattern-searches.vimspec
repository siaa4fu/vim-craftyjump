scriptencoding utf-8
" the text 'themis#suite()' is required to run test#viml#themis#test_file()
Describe pattern-searches

let s:samplelines = readfile('test/pattern-searches.sample')

Context motions simply move the cursor
  Before
    " use line 1 to 3
    call g:InitTestBuffer(s:samplelines[0 : 2])
    let @/ = 'aaa'
  End
  def s:moveWhole(motion: string, isExSelEnd = false)
    # move forward from the current position to the end of the buffer, or backward to the start
    # @param {'n' | 'N' | '[n' | ']n' | '[N' | ']N'} motion
    # @param {bool=} isExSelEnd - whether the cursor is at the end of the exclusive selection
    const isForward = motion ==# (v:searchforward ? 'n' : 'N') || motion ==# ']n' || motion ==# ']N'
    const keyToMove = "\<Plug>(craftyjump-search-" .. get({'[n': 'prev', ']n': 'next', '[N': 'first', ']N': 'last'}, motion, motion) .. ')'
    const GetIndices = (lnum, skipInitPos) => {
      const offset_to_posline = {'n': 4, 'N': 4, '[n': 4, ']n': 4, '[N': 8, ']N': 12}[motion] - 1
      return g:GetIndices(s:samplelines[lnum + offset_to_posline], isForward, isExSelEnd, skipInitPos)
    }
    const NotAtBufferEdge = isForward ? (lnum) => lnum <= line('$') : (lnum) => lnum > 0
    var lnum = line('.')
    lnum = g:MoveInLine(lnum, GetIndices(lnum, true), keyToMove, isForward)
    while NotAtBufferEdge(lnum)
      lnum = g:MoveInLine(lnum, GetIndices(lnum, false), keyToMove, isForward)
    endwhile
  enddef
  Context v:searchforward = 1
    Before
      let v:searchforward = 1
    End
    Context in normal mode
      It moves forward using 'n' from the first line
        normal! gg0
        call s:moveWhole('n')
      End
      It moves backward using 'N' from the last line
        normal! G$
        call s:moveWhole('N')
      End
    End
    Context in visual mode (when &selection is 'inclusive')
      Before all
        set selection=inclusive
      End
      After all
        call g:Expect(&selection).to_equal('inclusive')
        set selection&
      End
      Context characterwise - v
        After
          call g:Expect(mode()).to_equal('v')
        End
        It 'n'
          " move the end of the selection
          normal! gg0v
          call s:moveWhole('n', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole('n', v:false)
        End
        It 'N'
          " move the start of the selection
          normal! G$v
          call s:moveWhole('N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('N', v:false)
        End
      End
      Context linewise - V
        After
          call g:Expect(mode()).to_equal('V')
        End
        It 'n'
          " move the end of the selection
          normal! gg0V
          call s:moveWhole('n', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole('n', v:false)
        End
        It 'N'
          " move the start of the selection
          normal! G$V
          call s:moveWhole('N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('N', v:false)
        End
      End
      Context blockwise - <C-v>
        After
          call g:Expect(mode()).to_equal("\<C-v>")
        End
        It 'n'
          " move the end of the selection
          execute "normal! gg0\<C-v>"
          call s:moveWhole('n', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole('n', v:false)
        End
        It 'N'
          " move the start of the selection
          execute "normal! G$\<C-v>"
          call s:moveWhole('N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('N', v:false)
        End
      End
    End
    Context in visual mode (when &selection is 'exclusive')
      Before all
        set selection=exclusive
      End
      After all
        call g:Expect(&selection).to_equal('exclusive')
        set selection&
      End
      Context characterwise - v
        After
          call g:Expect(mode()).to_equal('v')
        End
        It 'n'
          " move the end of the selection
          normal! gg0v
          call s:moveWhole('n', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole('n', v:false)
        End
        It 'N'
          " move the start of the selection
          normal! G$v
          call s:moveWhole('N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('N', v:true)
        End
      End
      Context linewise - V
        After
          call g:Expect(mode()).to_equal('V')
        End
        It 'n'
          " move the end of the selection
          normal! gg0V
          call s:moveWhole('n', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole('n', v:false)
        End
        It 'N'
          " move the start of the selection
          normal! G$V
          call s:moveWhole('N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('N', v:true)
        End
      End
      Context blockwise - <C-v>
        After
          call g:Expect(mode()).to_equal("\<C-v>")
        End
        It 'n'
          " move the end of the selection
          execute "normal! gg0\<C-v>"
          call s:moveWhole('n', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole('n', v:false)
        End
        It 'N'
          " move the start of the selection
          execute "normal! G$\<C-v>"
          call s:moveWhole('N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('N', v:true)
        End
      End
    End
  End
  Context v:searchforward = 0
    Before
      let v:searchforward = 0
    End
    Context in normal mode
      It moves backward using 'n' from the last line
        normal! G$
        call s:moveWhole('n')
      End
      It moves forward using 'N' from the first line
        normal! gg0
        call s:moveWhole('N')
      End
    End
    Context in visual mode (when &selection is 'inclusive')
      Before all
        set selection=inclusive
      End
      After all
        call g:Expect(&selection).to_equal('inclusive')
        set selection&
      End
      Context characterwise - v
        After
          call g:Expect(mode()).to_equal('v')
        End
        It 'n'
          " move the start of the selection
          normal! G$v
          call s:moveWhole('n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('n', v:false)
        End
        It 'N'
          " move the end of the selection
          normal! gg0v
          call s:moveWhole('N', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole('N', v:false)
        End
      End
      Context linewise - V
        After
          call g:Expect(mode()).to_equal('V')
        End
        It 'n'
          " move the start of the selection
          normal! G$V
          call s:moveWhole('n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('n', v:false)
        End
        It 'N'
          " move the end of the selection
          normal! gg0V
          call s:moveWhole('N', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole('N', v:false)
        End
      End
      Context blockwise - <C-v>
        After
          call g:Expect(mode()).to_equal("\<C-v>")
        End
        It 'n'
          " move the start of the selection
          execute "normal! G$\<C-v>"
          call s:moveWhole('n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('n', v:false)
        End
        It 'N'
          " move the end of the selection
          execute "normal! gg0\<C-v>"
          call s:moveWhole('N', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole('N', v:false)
        End
      End
    End
    Context in visual mode (when &selection is 'exclusive')
      Before all
        set selection=exclusive
      End
      After all
        call g:Expect(&selection).to_equal('exclusive')
        set selection&
      End
      Context characterwise - v
        After
          call g:Expect(mode()).to_equal('v')
        End
        It 'n'
          " move the start of the selection
          normal! G$v
          call s:moveWhole('n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('n', v:true)
        End
        It 'N'
          " move the end of the selection
          normal! gg0v
          call s:moveWhole('N', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole('N', v:false)
        End
      End
      Context linewise - V
        After
          call g:Expect(mode()).to_equal('V')
        End
        It 'n'
          " move the start of the selection
          normal! G$V
          call s:moveWhole('n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('n', v:true)
        End
        It 'N'
          " move the end of the selection
          normal! gg0V
          call s:moveWhole('N', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole('N', v:false)
        End
      End
      Context blockwise - <C-v>
        After
          call g:Expect(mode()).to_equal("\<C-v>")
        End
        It 'n'
          " move the start of the selection
          execute "normal! G$\<C-v>"
          call s:moveWhole('n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('n', v:true)
        End
        It 'N'
          " move the end of the selection
          execute "normal! gg0\<C-v>"
          call s:moveWhole('N', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole('N', v:false)
        End
      End
    End
  End
  Context unaffected by v:searchforward
    Context in normal mode
      It moves backward using '[n' from the last line
        normal! G$
        call s:moveWhole('[n')
      End
      It moves forward using ']n' from the first line
        normal! gg0
        call s:moveWhole(']n')
      End
      It moves backward using '[N' from the last line
        normal! G$
        call s:moveWhole('[N')
      End
      It moves forward using ']N' from the first line
        normal! gg0
        call s:moveWhole(']N')
      End
    End
    Context in visual mode (when &selection is 'inclusive')
      Before all
        set selection=inclusive
      End
      After all
        call g:Expect(&selection).to_equal('inclusive')
        set selection&
      End
      Context characterwise - v
        After
          call g:Expect(mode()).to_equal('v')
        End
        It '[n'
          " move the start of the selection
          normal! G$v
          call s:moveWhole('[n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[n', v:false)
        End
        It ']n'
          " move the end of the selection
          normal! gg0v
          call s:moveWhole(']n', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole(']n', v:false)
        End
        It '[N'
          " move the start of the selection
          normal! G$v
          call s:moveWhole('[N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[N', v:false)
        End
        It ']N'
          " move the end of the selection
          normal! gg0v
          call s:moveWhole(']N', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole(']N', v:false)
        End
      End
      Context linewise - V
        After
          call g:Expect(mode()).to_equal('V')
        End
        It '[n'
          " move the start of the selection
          normal! G$V
          call s:moveWhole('[n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[n', v:false)
        End
        It ']n'
          " move the end of the selection
          normal! gg0V
          call s:moveWhole(']n', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole(']n', v:false)
        End
        It '[N'
          " move the start of the selection
          normal! G$V
          call s:moveWhole('[N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[N', v:false)
        End
        It ']N'
          " move the end of the selection
          normal! gg0V
          call s:moveWhole(']N', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole(']N', v:false)
        End
      End
      Context blockwise - <C-v>
        After
          call g:Expect(mode()).to_equal("\<C-v>")
        End
        It '[n'
          " move the start of the selection
          execute "normal! G$\<C-v>"
          call s:moveWhole('[n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[n', v:false)
        End
        It ']n'
          " move the end of the selection
          execute "normal! gg0\<C-v>"
          call s:moveWhole(']n', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole(']n', v:false)
        End
        It '[N'
          " move the start of the selection
          execute "normal! G$\<C-v>"
          call s:moveWhole('[N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[N', v:false)
        End
        It ']N'
          " move the end of the selection
          execute "normal! gg0\<C-v>"
          call s:moveWhole(']N', v:false)
          " move the start of the selection
          normal! o
          call s:moveWhole(']N', v:false)
        End
      End
    End
    Context in visual mode (when &selection is 'exclusive')
      Before all
        set selection=exclusive
      End
      After all
        call g:Expect(&selection).to_equal('exclusive')
        set selection&
      End
      Context characterwise - v
        After
          call g:Expect(mode()).to_equal('v')
        End
        It '[n'
          " move the start of the selection
          normal! G$v
          call s:moveWhole('[n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[n', v:true)
        End
        It ']n'
          " move the end of the selection
          normal! gg0v
          call s:moveWhole(']n', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole(']n', v:false)
        End
        It '[N'
          " move the start of the selection
          normal! G$v
          call s:moveWhole('[N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[N', v:true)
        End
        It ']N'
          " move the end of the selection
          normal! gg0v
          call s:moveWhole(']N', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole(']N', v:false)
        End
      End
      Context linewise - V
        After
          call g:Expect(mode()).to_equal('V')
        End
        It '[n'
          " move the start of the selection
          normal! G$V
          call s:moveWhole('[n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[n', v:true)
        End
        It ']n'
          " move the end of the selection
          normal! gg0V
          call s:moveWhole(']n', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole(']n', v:false)
        End
        It '[N'
          " move the start of the selection
          normal! G$V
          call s:moveWhole('[N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[N', v:true)
        End
        It ']N'
          " move the end of the selection
          normal! gg0V
          call s:moveWhole(']N', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole(']N', v:false)
        End
      End
      Context blockwise - <C-v>
        After
          call g:Expect(mode()).to_equal("\<C-v>")
        End
        It '[n'
          " move the start of the selection
          execute "normal! G$\<C-v>"
          call s:moveWhole('[n', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[n', v:true)
        End
        It ']n'
          " move the end of the selection
          execute "normal! gg0\<C-v>"
          call s:moveWhole(']n', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole(']n', v:false)
        End
        It '[N'
          " move the start of the selection
          execute "normal! G$\<C-v>"
          call s:moveWhole('[N', v:false)
          " move the end of the selection
          normal! o
          call s:moveWhole('[N', v:true)
        End
        It ']N'
          " move the end of the selection
          execute "normal! gg0\<C-v>"
          call s:moveWhole(']N', v:true)
          " move the start of the selection
          normal! o
          call s:moveWhole(']N', v:false)
        End
      End
    End
  End
End

Context motions search under the cursor
  Before
    " use line 1 to 3
    call g:InitTestBuffer(s:samplelines[0 : 2])
  End
  def s:starWhole(testmode: string, motion: string)
    # search forward from the current position to the end of the buffer, or backward to the start
    # @param {'n' | 'v(0)' | 'v(1)' | 'v(2)' | 'v(3)' | 'V' | '<C-v>'} testmode
    # @param {'*' | '#' | 'g*' | 'g#'} motion
    const isForward = motion ==# '*' || motion ==# 'g*'
    const keyToMove = "\<Plug>(craftyjump-search-" .. motion .. ')'
    const GetIndices = (lnum) => {
      const offset_to_posline = {
        'n':     {'*': 16, '#': 24, 'g*': 20, 'g#': 24},
        'v(0)':  {'*': 28, '#': 28, 'g*': 28, 'g#': 28},
        'v(1)':  {'*': 32, '#': 32, 'g*': 36, 'g#': 36},
        'v(2)':  {'*': 40, '#': 40, 'g*': 44, 'g#': 44},
        'v(3)':  {'*': 48, '#': 48, 'g*': 52, 'g#': 52},
        'V':     {'*': 56, '#': 56, 'g*': 56, 'g#': 56},
        '<C-v>': {'*': 60, '#': 64, 'g*': 60, 'g#': 64} }[testmode][motion] - 1
      return g:GetIndices(s:samplelines[lnum + offset_to_posline], isForward, false, false)
    }
    const NotAtBufferEdge = isForward ? (lnum) => lnum <= line('$') : (lnum) => lnum > 0
    var cnt = 1
    var lnum = line('.')
    while NotAtBufferEdge(lnum)
      # skip if the line is blank
      if getline(lnum) !=# ''
        # move the cursor and check if the movement to each index is correct
        for index in GetIndices(lnum)
          execute 'normal' (testmode ==# 'n' ? cnt > 2 ? "\<C-o>" : '' : 'gv') .. cnt .. keyToMove
          g:Expect(null).to_be_at_position([lnum, index])
          cnt += 1
        endfor
      endif
      lnum += isForward ? 1 : -1
    endwhile
  enddef
  Context in normal mode
    It moves forward using '*' from the first line
      normal! gg0
      call s:starWhole('n', '*')
    End
    It moves backward using '#' from the last line
      normal! G$
      call s:starWhole('n', '#')
    End
    It moves forward using 'g*' from the first line
      normal! gg0
      call s:starWhole('n', 'g*')
    End
    It moves backward using 'g#' from the last line
      normal! G$
      call s:starWhole('n', 'g#')
    End
  End
  Context in visual mode (when &selection is 'inclusive')
    Before all
      set selection=inclusive
    End
    After all
      call g:Expect(&selection).to_equal('inclusive')
      set selection&
    End
    Context characterwise - v(0)
      It '*'
        " set visual selection to search
        execute "normal! gg0viW\<Esc>"
        call s:starWhole('v(0)', '*')
        call g:Expect(@/).to_equal('\V:aaa:')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$viW\<Esc>"
        call s:starWhole('v(0)', '#')
        call g:Expect(@/).to_equal('\V:aaa:')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0viW\<Esc>"
        call s:starWhole('v(0)', 'g*')
        call g:Expect(@/).to_equal('\V:aaa:')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$viW\<Esc>"
        call s:starWhole('v(0)', 'g#')
        call g:Expect(@/).to_equal('\V:aaa:')
      End
    End
    Context characterwise - v(1)
      It '*'
        " set visual selection to search
        execute "normal! gg0viWol\<Esc>"
        call s:starWhole('v(1)', '*')
        call g:Expect(@/).to_equal('\V\<aaa:')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$viWol\<Esc>"
        call s:starWhole('v(1)', '#')
        call g:Expect(@/).to_equal('\V\<aaa:')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0viWol\<Esc>"
        call s:starWhole('v(1)', 'g*')
        call g:Expect(@/).to_equal('\Vaaa:')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$viWol\<Esc>"
        call s:starWhole('v(1)', 'g#')
        call g:Expect(@/).to_equal('\Vaaa:')
      End
    End
    Context characterwise - v(2)
      It '*'
        " set visual selection to search
        execute "normal! gg0viWh\<Esc>"
        call s:starWhole('v(2)', '*')
        call g:Expect(@/).to_equal('\V:aaa\>')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$viWh\<Esc>"
        call s:starWhole('v(2)', '#')
        call g:Expect(@/).to_equal('\V:aaa\>')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0viWh\<Esc>"
        call s:starWhole('v(2)', 'g*')
        call g:Expect(@/).to_equal('\V:aaa')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$viWh\<Esc>"
        call s:starWhole('v(2)', 'g#')
        call g:Expect(@/).to_equal('\V:aaa')
      End
    End
    Context characterwise - v(3)
      It '*'
        " set visual selection to search
        execute "normal! gg0viWhol\<Esc>"
        call s:starWhole('v(3)', '*')
        call g:Expect(@/).to_equal('\V\<aaa\>')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$viWhol\<Esc>"
        call s:starWhole('v(3)', '#')
        call g:Expect(@/).to_equal('\V\<aaa\>')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0viWhol\<Esc>"
        call s:starWhole('v(3)', 'g*')
        call g:Expect(@/).to_equal('\Vaaa')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$viWhol\<Esc>"
        call s:starWhole('v(3)', 'g#')
        call g:Expect(@/).to_equal('\Vaaa')
      End
    End
    Context linewise - V
      It '*'
        " set visual selection to search
        execute "normal! gg0V\<Esc>"
        call s:starWhole('V', '*')
        call g:Expect(@/).to_equal('\V:aaa: bbb aaa bbb :aaa:\n')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$V\<Esc>"
        call s:starWhole('V', '#')
        call g:Expect(@/).to_equal('\V:aaa: bbb aaa bbb :aaa:\n')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0V\<Esc>"
        call s:starWhole('V', 'g*')
        call g:Expect(@/).to_equal('\V:aaa: bbb aaa bbb :aaa:\n')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$V\<Esc>"
        call s:starWhole('V', 'g#')
        call g:Expect(@/).to_equal('\V:aaa: bbb aaa bbb :aaa:\n')
      End
    End
    Context blockwise - <C-v>
      It '*'
        " set visual selection to search
        execute "normal! gg0\<C-v>jo\<Esc>"
        call s:starWhole('<C-v>', '*')
        call g:Expect(@/).to_equal('\V:\n:')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$F:\<C-v>ko\<Esc>"
        call s:starWhole('<C-v>', '#')
        call g:Expect(@/).to_equal('\V:\n:')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0\<C-v>jo\<Esc>"
        call s:starWhole('<C-v>', 'g*')
        call g:Expect(@/).to_equal('\V:\n:')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$F:\<C-v>ko\<Esc>"
        call s:starWhole('<C-v>', 'g#')
        call g:Expect(@/).to_equal('\V:\n:')
      End
    End
  End
  Context in visual mode (when &selection is 'exclusive')
    Before all
      set selection=exclusive
    End
    After all
      call g:Expect(&selection).to_equal('exclusive')
      set selection&
    End
    Context characterwise - v(0)
      It '*'
        " set visual selection to search
        execute "normal! gg0viW\<Esc>"
        call s:starWhole('v(0)', '*')
        call g:Expect(@/).to_equal('\V:aaa:')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$viW\<Esc>"
        call s:starWhole('v(0)', '#')
        call g:Expect(@/).to_equal('\V:aaa:')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0viW\<Esc>"
        call s:starWhole('v(0)', 'g*')
        call g:Expect(@/).to_equal('\V:aaa:')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$viW\<Esc>"
        call s:starWhole('v(0)', 'g#')
        call g:Expect(@/).to_equal('\V:aaa:')
      End
    End
    Context characterwise - v(1)
      It '*'
        " set visual selection to search
        execute "normal! gg0viWol\<Esc>"
        call s:starWhole('v(1)', '*')
        call g:Expect(@/).to_equal('\V\<aaa:')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$viWol\<Esc>"
        call s:starWhole('v(1)', '#')
        call g:Expect(@/).to_equal('\V\<aaa:')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0viWol\<Esc>"
        call s:starWhole('v(1)', 'g*')
        call g:Expect(@/).to_equal('\Vaaa:')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$viWol\<Esc>"
        call s:starWhole('v(1)', 'g#')
        call g:Expect(@/).to_equal('\Vaaa:')
      End
    End
    Context characterwise - v(2)
      It '*'
        " set visual selection to search
        execute "normal! gg0viWh\<Esc>"
        call s:starWhole('v(2)', '*')
        call g:Expect(@/).to_equal('\V:aaa\>')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$viWh\<Esc>"
        call s:starWhole('v(2)', '#')
        call g:Expect(@/).to_equal('\V:aaa\>')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0viWh\<Esc>"
        call s:starWhole('v(2)', 'g*')
        call g:Expect(@/).to_equal('\V:aaa')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$viWh\<Esc>"
        call s:starWhole('v(2)', 'g#')
        call g:Expect(@/).to_equal('\V:aaa')
      End
    End
    Context characterwise - v(3)
      It '*'
        " set visual selection to search
        execute "normal! gg0viWhol\<Esc>"
        call s:starWhole('v(3)', '*')
        call g:Expect(@/).to_equal('\V\<aaa\>')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$viWhol\<Esc>"
        call s:starWhole('v(3)', '#')
        call g:Expect(@/).to_equal('\V\<aaa\>')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0viWhol\<Esc>"
        call s:starWhole('v(3)', 'g*')
        call g:Expect(@/).to_equal('\Vaaa')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$viWhol\<Esc>"
        call s:starWhole('v(3)', 'g#')
        call g:Expect(@/).to_equal('\Vaaa')
      End
    End
    Context linewise - V
      It '*'
        " set visual selection to search
        execute "normal! gg0V\<Esc>"
        call s:starWhole('V', '*')
        call g:Expect(@/).to_equal('\V:aaa: bbb aaa bbb :aaa:\n')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$V\<Esc>"
        call s:starWhole('V', '#')
        call g:Expect(@/).to_equal('\V:aaa: bbb aaa bbb :aaa:\n')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0V\<Esc>"
        call s:starWhole('V', 'g*')
        call g:Expect(@/).to_equal('\V:aaa: bbb aaa bbb :aaa:\n')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$V\<Esc>"
        call s:starWhole('V', 'g#')
        call g:Expect(@/).to_equal('\V:aaa: bbb aaa bbb :aaa:\n')
      End
    End
    Context blockwise - <C-v>
      It '*'
        " set visual selection to search
        execute "normal! gg0\<C-v>jo\<Esc>"
        call s:starWhole('<C-v>', '*')
        call g:Expect(@/).to_equal('\V:\n:')
      End
      It '#'
        " set visual selection to search
        execute "normal! G$F:\<C-v>ko\<Esc>"
        call s:starWhole('<C-v>', '#')
        call g:Expect(@/).to_equal('\V:\n:')
      End
      It 'g*'
        " set visual selection to search
        execute "normal! gg0\<C-v>jo\<Esc>"
        call s:starWhole('<C-v>', 'g*')
        call g:Expect(@/).to_equal('\V:\n:')
      End
      It 'g#'
        " set visual selection to search
        execute "normal! G$F:\<C-v>ko\<Esc>"
        call s:starWhole('<C-v>', 'g#')
        call g:Expect(@/).to_equal('\V:\n:')
      End
    End
  End
End

Context motions are used after operators
  Before
    " use line 1 to 3
    call g:InitTestBuffer(s:samplelines[0 : 2])
    let @/ = 'aaa'
  End
  Context d{motion} - delete
    It 'dn' (exclusive)
      normal! gg0
      " delete a match and repeat
      execute "normal d\<Plug>(craftyjump-search-n)"
      call g:Expect(getline('.')).to_equal('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
      " delete 2 match
      execute "normal d2\<Plug>(craftyjump-search-n)"
      call g:Expect(getline('.')).to_equal('aaa:bbbaaa:')
      call g:DotRepeat('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
    End
    It 'dN' (exclusive)
      normal! G$
      " delete a match and repeat
      execute "normal d\<Plug>(craftyjump-search-N)"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb ::')
      call g:DotRepeat(':aaa: bbb :')
      call g:DotRepeat('::')
      " delete 2 match
      execute "normal d2\<Plug>(craftyjump-search-N)"
      call g:Expect(getline('.')).to_equal(':aaabbb::')
      call g:DotRepeat(':aaa: bbb aaa bbb ::')
      call g:DotRepeat('::')
    End
    It 'd[n' (exclusive)
      normal! G$
      " delete a match and repeat
      execute "normal d\<Plug>(craftyjump-search-prev)"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb ::')
      call g:DotRepeat(':aaa: bbb :')
      call g:DotRepeat('::')
      " delete 2 match
      execute "normal d2\<Plug>(craftyjump-search-prev)"
      call g:Expect(getline('.')).to_equal(':aaabbb::')
      call g:DotRepeat(':aaa: bbb aaa bbb ::')
      call g:DotRepeat('::')
    End
    It 'd]n' (exclusive)
      normal! gg0
      " delete a match and repeat
      execute "normal d\<Plug>(craftyjump-search-next)"
      call g:Expect(getline('.')).to_equal('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
      " delete 2 match
      execute "normal d2\<Plug>(craftyjump-search-next)"
      call g:Expect(getline('.')).to_equal('aaa:bbbaaa:')
      call g:DotRepeat('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
    End
    It 'd[N' (exclusive)
      normal! G$
      " delete a match and repeat
      execute "normal d\<Plug>(craftyjump-search-first)"
      call g:Expect(getline('.')).to_equal('::')
    End
    It 'd]N' (exclusive)
      normal! gg0
      " delete a match and repeat
      execute "normal d\<Plug>(craftyjump-search-last)"
      call g:Expect(getline('.')).to_equal('aaa:')
    End
    It 'd*' (exclusive)
      normal! gg0
      " delete a match and repeat
      execute "normal d\<Plug>(craftyjump-search-*)"
      call g:Expect(getline('.')).to_equal(':: bbb aaa bbb :aaa:')
      call g:DotRepeat('::  aaa bbb :aaa:')
      call g:DotRepeat('::   bbb :aaa:')
      call g:DotRepeat('::    :aaa:')
      call g:DotRepeat('::    ::')
      call g:DotRepeat('::    ')
      " No string under cursor
      call g:DotRepeat('::    ')
    End
    It 'd2*'/'d3*' (exclusive)
      normal! gg0
      " delete to a match and repeat
      execute "normal d2\<Plug>(craftyjump-search-*)"
      call g:Expect(getline('.')).to_equal('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
      " next line
      call g:DotRepeat('aaa:bbbaaa:')
      call g:DotRepeat('aaa: bbb aaa bbb :aaa:')
      execute "normal d3\<Plug>(craftyjump-search-*)"
      call g:Expect(getline('.')).to_equal('aaa:')
    End
    It 'd#' (exclusive)
      normal! G$
      " delete a match and repeat
      execute "normal d\<Plug>(craftyjump-search-#)"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb :aaa')
      call g:DotRepeat(':aaa: bbb aaa bbb :')
      call g:DotRepeat(':aaa: bbb aaa bbb ')
      " No string under cursor
      call g:DotRepeat(':aaa: bbb aaa bbb ')
    End
    It 'd2#'/'d3#' (exclusive)
      normal! G$
      " delete to a match and repeat
      execute "normal d2\<Plug>(craftyjump-search-#)"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb :')
      call g:DotRepeat(':aaa:')
      call g:DotRepeat(':')
      " next line
      call g:DotRepeat(':aaabbb:aaa:bbbaaa:')
      call g:DotRepeat(':aaabbb:aaa:')
      call g:DotRepeat(':aaabbb:')
      call g:DotRepeat(':')
      execute "normal d3\<Plug>(craftyjump-search-#)"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb :')
      call g:DotRepeat(':')
    End
    It 'dg*' (exclusive)
      normal! gg0
      " delete a match and repeat
      execute "normal d\<Plug>(craftyjump-search-g*)"
      call g:Expect(getline('.')).to_equal(':: bbb aaa bbb :aaa:')
      call g:DotRepeat('::  aaa bbb :aaa:')
      call g:DotRepeat('::   bbb :aaa:')
      call g:DotRepeat('::    :aaa:')
      call g:DotRepeat('::    ::')
      call g:DotRepeat('::    ')
      " No string under cursor
      call g:DotRepeat('::    ')
    End
    It 'd2g*'/'d3g*' (exclusive)
      normal! gg0
      " delete to a match and repeat
      execute "normal d2\<Plug>(craftyjump-search-g*)"
      call g:Expect(getline('.')).to_equal('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
      " next line
      call g:DotRepeat('aaabbb:aaa:bbbaaa:')
      call g:DotRepeat('aabbb:aaa:bbbaaa:')
      call g:DotRepeat('abbb:aaa:bbbaaa:')
      call g:DotRepeat('bbb:aaa:bbbaaa:')
      call g:DotRepeat('bbbaaa:')
      call g:DotRepeat('bbaaa:')
      call g:DotRepeat('baaa:')
      call g:DotRepeat('aaa:')
      call g:DotRepeat('aaa: bbb aaa bbb :aaa:')
      execute "normal d3\<Plug>(craftyjump-search-g*)"
      call g:Expect(getline('.')).to_equal('aaa:')
    End
    It 'dg#' (exclusive)
      normal! G$
      " delete a match and repeat
      execute "normal d\<Plug>(craftyjump-search-g#)"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb :aaa')
      call g:DotRepeat(':aaa: bbb aaa bbb :')
      call g:DotRepeat(':aaa: bbb aaa bbb ')
      " No string under cursor
      call g:DotRepeat(':aaa: bbb aaa bbb ')
    End
    It 'd2g#'/'d3g#' (exclusive)
      normal! G$
      " delete to a match and repeat
      execute "normal d2\<Plug>(craftyjump-search-g#)"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb :')
      call g:DotRepeat(':aaa:')
      call g:DotRepeat(':')
      " next line
      call g:DotRepeat(':aaabbb:aaa:bbbaaa:')
      call g:DotRepeat(':aaabbb:aaa:')
      call g:DotRepeat(':aaabbb:')
      call g:DotRepeat(':')
      execute "normal d3\<Plug>(craftyjump-search-g#)"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb :')
      call g:DotRepeat(':')
    End
  End
  Context c{motion} - change
    " after exiting insert mode, the cursor position shifts one to the left
    It 'cn' (exclusive)
      normal! gg0
      " change a match and repeat
      execute "normal c\<Plug>(craftyjump-search-n)\<Esc>"
      call g:Expect(getline('.')).to_equal('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
      " change 2 match
      execute "normal c2\<Plug>(craftyjump-search-n)\<Esc>"
      call g:Expect(getline('.')).to_equal('aaa:bbbaaa:')
      call g:DotRepeat('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
    End
    It 'cN' (exclusive)
      normal! G$
      " change a match and repeat
      execute "normal c\<Plug>(craftyjump-search-N)\<Esc>"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb ::')
      call g:DotRepeat(':aaa: bbb ::')
      call g:DotRepeat(': ::')
      " change 2 match
      execute "normal c2\<Plug>(craftyjump-search-N)\<Esc>"
      call g:Expect(getline('.')).to_equal(':aaabbb:: ::')
      call g:DotRepeat(':aaa: bbb aaa bbb ::: ::')
      call g:DotRepeat(':::: ::')
    End
    It 'c[n' (exclusive)
      normal! G$
      " change a match and repeat
      execute "normal c\<Plug>(craftyjump-search-prev)\<Esc>"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb ::')
      call g:DotRepeat(':aaa: bbb ::')
      call g:DotRepeat(': ::')
      " change 2 match
      execute "normal c2\<Plug>(craftyjump-search-prev)\<Esc>"
      call g:Expect(getline('.')).to_equal(':aaabbb:: ::')
      call g:DotRepeat(':aaa: bbb aaa bbb ::: ::')
      call g:DotRepeat(':::: ::')
    End
    It 'c]n' (exclusive)
      normal! gg0
      " change a match and repeat
      execute "normal c\<Plug>(craftyjump-search-next)\<Esc>"
      call g:Expect(getline('.')).to_equal('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
      " change 2 match
      execute "normal c2\<Plug>(craftyjump-search-next)\<Esc>"
      call g:Expect(getline('.')).to_equal('aaa:bbbaaa:')
      call g:DotRepeat('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
    End
    It 'c[N' (exclusive)
      normal! G$
      " change a match and repeat
      execute "normal c\<Plug>(craftyjump-search-first)\<Esc>"
      call g:Expect(getline('.')).to_equal('::')
    End
    It 'c]N' (exclusive)
      normal! gg0
      " change a match and repeat
      execute "normal c\<Plug>(craftyjump-search-last)\<Esc>"
      call g:Expect(getline('.')).to_equal('aaa:')
    End
    It 'c*' (exclusive)
      normal! gg0
      " change a match and repeat
      execute "normal c\<Plug>(craftyjump-search-*)\<Esc>"
      call g:Expect(getline('.')).to_equal(':: bbb aaa bbb :aaa:')
      call g:DotRepeat('::  aaa bbb :aaa:')
      call g:DotRepeat('::   bbb :aaa:')
      call g:DotRepeat('::    :aaa:')
      call g:DotRepeat('::    ::')
      call g:DotRepeat('::    ')
      " No string under cursor
      call g:DotRepeat('::    ')
    End
    It 'c2*' 'c3*' (exclusive)
      normal! gg0
      " change to a match and repeat
      execute "normal c2\<Plug>(craftyjump-search-*)\<Esc>"
      call g:Expect(getline('.')).to_equal('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
      " next line
      call g:DotRepeat('aaa:bbbaaa:')
      call g:DotRepeat('aaa: bbb aaa bbb :aaa:')
      execute "normal c3\<Plug>(craftyjump-search-*)\<Esc>"
      call g:Expect(getline('.')).to_equal('aaa:')
    End
    It 'c#' (exclusive)
      normal! G$
      " change a match and repeat
      execute "normal c\<Plug>(craftyjump-search-#)\<Esc>"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb :aaa')
      call g:DotRepeat(':aaa: bbb aaa bbb :')
      call g:DotRepeat(':aaa: bbb aaa bbb ')
      " No string under cursor
      call g:DotRepeat(':aaa: bbb aaa bbb ')
    End
    It 'c2#' 'c3#' (exclusive)
      normal! G$
      " change to a match and repeat
      execute "normal c2\<Plug>(craftyjump-search-#)\<Esc>"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb :')
      call g:DotRepeat(':aaa :')
      call g:DotRepeat(':a :')
      call g:DotRepeat('a :')
      call g:DotRepeat(' :')
      " next line
      call g:DotRepeat(':aaabbb:aaa:bbbaaa :')
      call g:DotRepeat(':aaabbb:aaa:a :')
      call g:DotRepeat(':aaabbb:aaaa :')
      call g:DotRepeat(':aaabbb:aa :')
      call g:DotRepeat(':aaabbbaa :')
      call g:DotRepeat(':baa :')
      call g:DotRepeat('baa :')
      call g:DotRepeat('aa :')
      call g:DotRepeat('a :')
      call g:DotRepeat(' :')
      execute "normal c3\<Plug>(craftyjump-search-#)\<Esc>"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb  :')
      call g:DotRepeat('  :')
    End
    It 'cg*' (exclusive)
      normal! gg0
      " change a match and repeat
      execute "normal c\<Plug>(craftyjump-search-g*)\<Esc>"
      call g:Expect(getline('.')).to_equal(':: bbb aaa bbb :aaa:')
      call g:DotRepeat('::  aaa bbb :aaa:')
      call g:DotRepeat('::   bbb :aaa:')
      call g:DotRepeat('::    :aaa:')
      call g:DotRepeat('::    ::')
      call g:DotRepeat('::    ')
      " No string under cursor
      call g:DotRepeat('::    ')
    End
    It 'c2g*' 'c3g*' (exclusive)
      normal! gg0
      " change to a match and repeat
      execute "normal c2\<Plug>(craftyjump-search-g*)\<Esc>"
      call g:Expect(getline('.')).to_equal('aaa: bbb aaa bbb :aaa:')
      call g:DotRepeat('aaa bbb :aaa:')
      call g:DotRepeat('aaa:')
      " next line
      call g:DotRepeat('aaabbb:aaa:bbbaaa:')
      call g:DotRepeat('aabbb:aaa:bbbaaa:')
      call g:DotRepeat('abbb:aaa:bbbaaa:')
      call g:DotRepeat('bbb:aaa:bbbaaa:')
      call g:DotRepeat('bbbaaa:')
      call g:DotRepeat('bbaaa:')
      call g:DotRepeat('baaa:')
      call g:DotRepeat('aaa:')
      call g:DotRepeat('aaa: bbb aaa bbb :aaa:')
      execute "normal c3\<Plug>(craftyjump-search-g*)\<Esc>"
      call g:Expect(getline('.')).to_equal('aaa:')
    End
    It 'cg#' (exclusive)
      normal! G$
      " change a match and repeat
      execute "normal c\<Plug>(craftyjump-search-g#)\<Esc>"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb :aaa')
      call g:DotRepeat(':aaa: bbb aaa bbb :')
      call g:DotRepeat(':aaa: bbb aaa bbb ')
      " No string under cursor
      call g:DotRepeat(':aaa: bbb aaa bbb ')
    End
    It 'c2g#' 'c3g#' (exclusive)
      normal! G$
      " change to a match and repeat
      execute "normal c2\<Plug>(craftyjump-search-g#)\<Esc>"
      call g:Expect(getline('.')).to_equal(':aaa: bbb aaa bbb :')
      call g:DotRepeat(':aaa :')
      call g:DotRepeat(':a :')
      " next line
      call g:DotRepeat(':aaabbb:aaa:bbbaa:a :')
      call g:DotRepeat(':aaabbb:aaa:a:a :')
      call g:DotRepeat(':aaabbb:aa:a:a :')
      call g:DotRepeat(':aaabbb:a:a:a :')
      call g:DotRepeat(':aa:a:a:a :')
      call g:DotRepeat(':a:a:a:a :')
      call g:DotRepeat(':aaa: bbb aaa bbb :aa:a:a:a:a :')
      execute "normal c3\<Plug>(craftyjump-search-g#)\<Esc>"
      call g:Expect(getline('.')).to_equal(':aaa: bbb a:a:a:a:a :')
      call g:DotRepeat(':a a:a:a:a:a :')
    End
  End
End

End
