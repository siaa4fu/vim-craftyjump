scriptencoding utf-8
" the text 'themis#suite()' is required to run test#viml#themis#test_file()
Describe word-motions

let s:expect = themis#helper('expect')
let s:samplelines = readfile('test/sample_for_word_motions')
" the signs in the sample text indicate types of cursor movements as follows
"   # - the cursor normally goes to the signed position
"   + - in visual mode, the cursor always goes to just after the signed position
"   * - if the cursor is at the end of the exclusive selection, it goes to just after the signed position
"       if not, to the signed position

Context motions simply move the cursor
  Before
    " use line 1 to 17
    call InitTestBuffer(s:samplelines[0 : 16])
  End
  function! s:getIndices(line, motion, isForward, isExSelEnd)
    " @param {string} line
    " @param {'w' | 'b' | 'e' | 'ge'} motion
    " @param {bool} isForward - return indices if the motion is forward, reversed indices if backward
    " @param {bool} isExSelEnd - whether the cursor is the end of the exclusive selection
    " @return {list<number>} - character indices of keyword characters
    let indices = []
    let Put = function(a:isForward ? 'add' : 'insert', [indices])
    let ptn = '[#+*]'
    let currenttype = mode() =~# "[vV\<C-v>]" ? a:isExSelEnd ? '*' : '+' : '#'
    let pos = matchstrpos(a:line, ptn) " 0-based byte index
    while pos[0] !=# ''
      " matchstrpos(...)[1] gives the 0-based byte index of the starting position of the match
      call Put(charidx(a:line, pos[1]) + (pos[0] !=# '#' && pos[0] ==# currenttype ? 1 : 0) + 1) " convert 0-based character index to 1-based character index
      let pos = matchstrpos(a:line, ptn, pos[2])
    endwhile
    return indices
  endfunction
  function! s:moveInLine(lnum, motion, isInitialLine, isExSelEnd)
    " @param {number} lnum - move in the line with the specified line number
    " @param {'w' | 'b' | 'e' | 'ge'} motion
    " @param {bool} isInitialLine - skip the initial position even if it is a keyword character
    " @param {bool} isExSelEnd - whether the cursor is the end of the exclusive selection
    " @return {number} - next line number
    let isForward = a:motion ==# 'w' || a:motion ==# 'e'
    let line = getline(a:lnum)
    " skip if the line is blank
    if line !=# ''
      " get the line indicating where the cursor is expected to move corresponding to the current line
      let positionline = s:samplelines[a:lnum + #{w: 18, b: 36, e: 54, ge: 72}[a:motion] - 1]
      let indices = s:getIndices(positionline, a:motion, isForward, a:isExSelEnd)
      if isForward
        " skip the initial position
        if a:isInitialLine && get(indices, 0, -1) == 1 | let indices = indices[1 :] | endif
      else
        " skip the initial position
        if a:isInitialLine && get(indices, 0, -1) == strcharlen(line) | let indices = indices[1 :] | endif
      endif
      for index in indices
        execute "normal \<Plug>(craftyjump-word-" . a:motion . ')'
        call s:expect(v:null).to_be_at_position([a:lnum, index])
      endfor
    endif
    return a:lnum + (isForward ? 1 : -1)
  endfunction
  def s:moveWhole(motion: string, isExSelEnd = v:false)
    # move forward from the current position to the end of the buffer, or backward to the start
    # @param {'w' | 'b' | 'e' | 'ge'} motion
    # @param {bool=} isExSelEnd - whether the cursor is the end of the exclusive selection
    const isForward = motion ==# 'w' || motion ==# 'e'
    const NotAtBufferEdge = isForward ? (lnum) => lnum <= line('$') : (lnum) => lnum > 0
    var lnum = s:moveInLine(line('.'), motion, v:true, isExSelEnd)
    while NotAtBufferEdge(lnum)
      lnum = s:moveInLine(lnum, motion, v:false, isExSelEnd)
    endwhile
  enddef
  Context in normal mode
    It moves forward using 'w' from the first line
      normal! gg0
      call s:moveWhole('w')
      " extra move
      execute "normal \<Plug>(craftyjump-word-w)"
      call s:expect(v:null).to_be_at_position([line('$'), '$'])
    End
    It moves backward using 'b' from the last line
      normal! G$
      call s:moveWhole('b')
      " extra move
      execute "normal \<Plug>(craftyjump-word-b)"
      call s:expect(v:null).to_be_at_position([1, '0'])
    End
    It moves forward using 'e' from the first line
      normal! gg0
      call s:moveWhole('e')
      " extra move
      execute "normal \<Plug>(craftyjump-word-e)"
      call s:expect(v:null).to_be_at_position([line('$'), '$'])
    End
    It moves backward using 'ge' from the last line
      normal! G$
      call s:moveWhole('ge')
      " extra move
      execute "normal \<Plug>(craftyjump-word-ge)"
      call s:expect(v:null).to_be_at_position([1, '0'])
    End
  End
  Context in visual mode
    Context [v] characterwise (inclusive)
      Before
        set selection=inclusive
      End
      After
        call s:expect(&selection).to_equal('inclusive')
        call s:expect(mode()).to_equal('v')
      End
      It 'w'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('w', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:false)
      End
      It 'e'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('e', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:false)
      End
    End
    Context [v] characterwise (exclusive)
      Before
        set selection=exclusive
      End
      After
        call s:expect(&selection).to_equal('exclusive')
        call s:expect(mode()).to_equal('v')
      End
      It 'w'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('w', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:true)
      End
      It 'e'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('e', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:true)
      End
    End
    Context [V] linewise (inclusive)
      Before
        set selection=inclusive
      End
      After
        call s:expect(&selection).to_equal('inclusive')
        call s:expect(mode()).to_equal('V')
      End
      It 'w'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('w', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:false)
      End
      It 'e'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('e', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:false)
      End
    End
    Context [V] linewise (exclusive)
      Before
        set selection=exclusive
      End
      After
        call s:expect(&selection).to_equal('exclusive')
        call s:expect(mode()).to_equal('V')
      End
      It 'w'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('w', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:true)
      End
      It 'e'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('e', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:true)
      End
    End
    Context [<C-v>] blockwise (inclusive)
      Before
        set selection=inclusive
      End
      After
        call s:expect(&selection).to_equal('inclusive')
        call s:expect(mode()).to_equal("\<C-v>")
      End
      It 'w'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('w', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:false)
      End
      It 'e'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('e', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:false)
      End
    End
    Context [<C-v>] blockwise (exclusive)
      Before
        set selection=exclusive
      End
      After
        call s:expect(&selection).to_equal('exclusive')
        call s:expect(mode()).to_equal("\<C-v>")
      End
      It 'w'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('w', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:true)
      End
      It 'e'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('e', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:true)
      End
    End
  End
End

Context motions are used after operators
  Before
    " use lines 8 to 16
    call InitTestBuffer(s:samplelines[7 : 15])
  End
  function! s:dotrepeat(expect)
    normal! .
    call s:expect(getline('.')).to_equal(a:expect)
  endfunction
  Context d{motion} - delete words
    It 'dw' (exclusive)
      normal! gg0
      " delete a word and repeat
      execute "normal d\<Plug>(craftyjump-word-w)"
      call s:expect(getline('.')).to_equal('keyword')
      call s:dotrepeat('')
      call s:dotrepeat('keyword ... [non-keyword]')
      call s:dotrepeat('non-keyword]')
      call s:dotrepeat('keyword]')
      call s:dotrepeat('')
      call s:dotrepeat('non-keyword] ... keyword')
      call s:dotrepeat('keyword] ... keyword')
      call s:dotrepeat('keyword')
      call s:dotrepeat('')
      call s:dotrepeat('non-keyword] ... [non-keyword]')
      call s:dotrepeat('keyword] ... [non-keyword]')
      call s:dotrepeat('non-keyword]')
      call s:dotrepeat('keyword]')
      call s:dotrepeat('')
      " next paragraph
      call s:dotrepeat('keyword ... keyword  ')
      " delete 2 words and repeat
      execute "normal d2\<Plug>(craftyjump-word-w)"
      call s:expect(getline('.')).to_equal('  ')
      call s:dotrepeat('non-keyword]  ')
      call s:dotrepeat('  ')
      call s:dotrepeat('keyword] ... keyword  ')
      call s:dotrepeat('  ')
      call s:dotrepeat('keyword] ... [non-keyword]  ')
      call s:dotrepeat('keyword]  ')
    End
    It 'db' (exclusive)
      normal! G$
      " delete a word and repeat
      execute "normal d\<Plug>(craftyjump-word-b)"
      call s:expect(getline('.')).to_equal('  [non-keyword] ... [non- ')
      call s:dotrepeat('  [non-keyword] ... [ ')
      call s:dotrepeat('  [non- ')
      call s:dotrepeat('  [ ')
      call s:dotrepeat('   ')
      call s:dotrepeat('  [non-keyword] ...  ')
      call s:dotrepeat('  [non- ')
      call s:dotrepeat('  [ ')
      call s:dotrepeat('   ')
      call s:dotrepeat('  keyword ... [non- ')
      call s:dotrepeat('  keyword ... [ ')
      call s:dotrepeat('   ')
      call s:dotrepeat('  keyword ...  ')
      call s:dotrepeat('   ')
      " previous paragraph
      call s:dotrepeat('[non-keyword] ... [non- ')
      " delete 2 words and repeat
      execute "normal d2\<Plug>(craftyjump-word-b)"
      call s:expect(getline('.')).to_equal('[non- ')
      call s:dotrepeat(' ')
      call s:dotrepeat('[non- ')
      call s:dotrepeat(' ')
      call s:dotrepeat('keyword ... [ ')
      call s:dotrepeat('keyword ...  ')
    End
    It 'de' (inclusive)
      normal! gg0
      " delete a word and repeat
      execute "normal d\<Plug>(craftyjump-word-e)"
      call s:expect(getline('.')).to_equal(' ... keyword')
      call s:dotrepeat('')
      call s:dotrepeat(' ... [non-keyword]')
      call s:dotrepeat('-keyword]')
      call s:dotrepeat(']')
      call s:dotrepeat('-keyword] ... keyword')
      call s:dotrepeat('] ... keyword')
      call s:dotrepeat('')
      call s:dotrepeat('-keyword] ... [non-keyword]')
      call s:dotrepeat('] ... [non-keyword]')
      call s:dotrepeat('-keyword]')
      call s:dotrepeat(']')
      " next paragraph
      call s:dotrepeat(' ... keyword  ')
      " delete 2 words and repeat
      execute "normal d2\<Plug>(craftyjump-word-e)"
      call s:expect(getline('.')).to_equal(' ... [non-keyword]  ')
      call s:dotrepeat(']  ')
      call s:dotrepeat('] ... keyword  ')
      call s:dotrepeat('-keyword] ... [non-keyword]  ')
      call s:dotrepeat('-keyword]  ')
    End
    It 'dge' (inclusive)
      normal! G$
      " delete a word and repeat
      execute "normal d\<Plug>(craftyjump-word-ge)"
      call s:expect(getline('.')).to_equal('  [non-keyword] ... [non-keywor')
      call s:dotrepeat('  [non-keyword] ... [no')
      call s:dotrepeat('  [non-keywor')
      call s:dotrepeat('  [no')
      call s:dotrepeat('  ')
      call s:dotrepeat('  [non-keyword] ... keywor')
      call s:dotrepeat('  [non-keywor')
      call s:dotrepeat('  [no')
      call s:dotrepeat('  ')
      call s:dotrepeat('  keyword ... [non-keywor')
      call s:dotrepeat('  keyword ... [no')
      call s:dotrepeat('  keywor')
      call s:dotrepeat('  ')
      call s:dotrepeat('  keyword ... keywor')
      call s:dotrepeat('  keywor')
      call s:dotrepeat('  ')
      " previous paragraph
      call s:dotrepeat('[non-keyword] ... [non-keywor')
      " delete 2 words and repeat
      execute "normal d2\<Plug>(craftyjump-word-ge)"
      call s:expect(getline('.')).to_equal('[non-keywor')
      call s:dotrepeat('')
      call s:dotrepeat('[non-keywor')
      call s:dotrepeat('')
      call s:dotrepeat('keyword ... [no')
      call s:dotrepeat('')
      call s:dotrepeat('keywor')
    End
  End
  Context c{motion} - change words
    " after exiting insert mode, the cursor position shifts one to the left
    It 'cw' (special case `WORD`)
      normal! gg0
      " change a word and repeat
      execute "normal c\<Plug>(craftyjump-word-w)\<Esc>"
      call s:expect(getline('.')).to_equal(' keyword')
      call s:dotrepeat('keyword')
      call s:dotrepeat('')
      call s:dotrepeat('keyword ... [non-keyword]')
      call s:dotrepeat(' [non-keyword]')
      call s:dotrepeat('non-keyword]')
      call s:dotrepeat('keyword]')
      call s:dotrepeat('')
      call s:dotrepeat('non-keyword] ... keyword')
      call s:dotrepeat('keyword] ... keyword')
      call s:dotrepeat(' keyword')
      call s:dotrepeat('keyword')
      call s:dotrepeat('')
      call s:dotrepeat('non-keyword] ... [non-keyword]')
      call s:dotrepeat('keyword] ... [non-keyword]')
      call s:dotrepeat(' [non-keyword]')
      call s:dotrepeat('non-keyword]')
      call s:dotrepeat('keyword]')
      call s:dotrepeat('')
      " next paragraph
      call s:dotrepeat('keyword ... keyword  ')
      " change 2 words and repeat
      execute "normal c2\<Plug>(craftyjump-word-w)\<Esc>"
      call s:expect(getline('.')).to_equal('  ')
      call s:dotrepeat('non-keyword]  ')
      call s:dotrepeat('  ')
      call s:dotrepeat('keyword] ... keyword  ')
      call s:dotrepeat('  ')
      call s:dotrepeat('keyword] ... [non-keyword]  ')
      call s:dotrepeat('keyword]  ')
    End
    It 'cb' (exclusive)
      normal! G$
      " change a word and repeat
      execute "normal c\<Plug>(craftyjump-word-b)\<Esc>"
      call s:expect(getline('.')).to_equal('  [non-keyword] ... [non- ')
      call s:dotrepeat('  [non-keyword] ... [- ')
      call s:dotrepeat('  [non-[- ')
      call s:dotrepeat('  [-[- ')
      call s:dotrepeat('  [non-keyword] ... [-[- ')
      call s:dotrepeat('  [non- [-[- ')
      call s:dotrepeat('  [- [-[- ')
      call s:dotrepeat('  keyword ... [non-[- [-[- ')
      call s:dotrepeat('  keyword ... [-[- [-[- ')
      call s:dotrepeat('  [-[- [-[- ')
      call s:dotrepeat('  keyword ...  [-[- [-[- ')
      call s:dotrepeat('    [-[- [-[- ')
      " previous paragraph
      call s:dotrepeat('[non-keyword] ... [non-   [-[- [-[- ')
      " change 2 words and repeat
      execute "normal c2\<Plug>(craftyjump-word-b)\<Esc>"
      call s:expect(getline('.')).to_equal('[non--   [-[- [-[- ')
      call s:dotrepeat('--   [-[- [-[- ')
      call s:dotrepeat('[non---   [-[- [-[- ')
      call s:dotrepeat('---   [-[- [-[- ')
      call s:dotrepeat('keyword ... [---   [-[- [-[- ')
      call s:dotrepeat('keyword ... [---   [-[- [-[- ')
    End
    It 'ce' (inclusive)
      normal! gg0
      " change a word and repeat
      execute "normal c\<Plug>(craftyjump-word-e)\<Esc>"
      call s:expect(getline('.')).to_equal(' ... keyword')
      call s:dotrepeat('')
      call s:dotrepeat(' ... [non-keyword]')
      call s:dotrepeat('-keyword]')
      call s:dotrepeat(']')
      call s:dotrepeat('-keyword] ... keyword')
      call s:dotrepeat('] ... keyword')
      call s:dotrepeat('')
      call s:dotrepeat('-keyword] ... [non-keyword]')
      call s:dotrepeat('] ... [non-keyword]')
      call s:dotrepeat('-keyword]')
      call s:dotrepeat(']')
      " next paragraph
      call s:dotrepeat(' ... keyword  ')
      " change 2 words and repeat
      execute "normal c2\<Plug>(craftyjump-word-e)\<Esc>"
      call s:expect(getline('.')).to_equal(' ... [non-keyword]  ')
      call s:dotrepeat(']  ')
      call s:dotrepeat('] ... keyword  ')
      call s:dotrepeat('-keyword] ... [non-keyword]  ')
      call s:dotrepeat('-keyword]  ')
    End
    It 'cge' (inclusive)
      normal! G$
      " change a word and repeat
      execute "normal c\<Plug>(craftyjump-word-ge)\<Esc>"
      call s:expect(getline('.')).to_equal('  [non-keyword] ... [non-keywor')
      call s:dotrepeat('  [non-keyword] ... [no')
      call s:dotrepeat('  [non-keywor')
      call s:dotrepeat('  [no')
      call s:dotrepeat('  ')
      call s:dotrepeat('  [non-keyword] ... keywor')
      call s:dotrepeat('  [non-keywor')
      call s:dotrepeat('  [no')
      call s:dotrepeat('  ')
      call s:dotrepeat('  keyword ... [non-keywor')
      call s:dotrepeat('  keyword ... [no')
      call s:dotrepeat('  keywor')
      call s:dotrepeat('  ')
      call s:dotrepeat('  keyword ... keywor')
      call s:dotrepeat('  keywor')
      call s:dotrepeat('  ')
      " previous paragraph
      call s:dotrepeat('[non-keyword] ... [non-keywor')
      " change 2 words and repeat
      execute "normal c2\<Plug>(craftyjump-word-ge)\<Esc>"
      call s:expect(getline('.')).to_equal('[non-keywor')
      call s:dotrepeat('')
      call s:dotrepeat('[non-keywor')
      call s:dotrepeat('')
      call s:dotrepeat('keyword ... [no')
      call s:dotrepeat('')
      call s:dotrepeat('keywor')
    End
  End
End

End
