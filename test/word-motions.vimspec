scriptencoding utf-8
" the text 'themis#suite()' is required to run test#viml#themis#test_file()
Describe word-motions

let s:samplelines = readfile('test/word_motions.sample')

Context motions simply move the cursor
  Before
    " use line 1 to 17
    call InitTestBuffer(s:samplelines[0 : 16])
  End
  def s:moveWhole(motion: string, isExSelEnd = v:false)
    # move forward from the current position to the end of the buffer, or backward to the start
    # @param {'w' | 'b' | 'e' | 'ge'} motion
    # @param {bool=} isExSelEnd - whether the cursor is at the end of the exclusive selection
    const isForward = motion ==# 'w' || motion ==# 'e'
    const keyToMove = "\<Plug>(craftyjump-word-" .. motion .. ')'
    const GetIndices = (lnum, skipInitPos) => {
      const offset_to_posline = {w: 18, b: 36, e: 54, ge: 72}[motion] - 1
      return g:GetIndices(s:samplelines[lnum + offset_to_posline], isForward, isExSelEnd, skipInitPos)
    }
    const NotAtBufferEdge = isForward ? (lnum) => lnum <= line('$') : (lnum) => lnum > 0
    var lnum = line('.')
    lnum = g:MoveInLine(lnum, GetIndices(lnum, v:true), keyToMove, isForward)
    while NotAtBufferEdge(lnum)
      lnum = g:MoveInLine(lnum, GetIndices(lnum, v:false), keyToMove, isForward)
    endwhile
  enddef
  Context in normal mode
    It moves forward using 'w' from the first line
      normal! gg0
      call s:moveWhole('w')
      " extra move
      execute "normal \<Plug>(craftyjump-word-w)"
      call g:Expect(v:null).to_be_at_position([line('$'), '$'])
    End
    It moves backward using 'b' from the last line
      normal! G$
      call s:moveWhole('b')
      " extra move
      execute "normal \<Plug>(craftyjump-word-b)"
      call g:Expect(v:null).to_be_at_position([1, '0'])
    End
    It moves forward using 'e' from the first line
      normal! gg0
      call s:moveWhole('e')
      " extra move
      execute "normal \<Plug>(craftyjump-word-e)"
      call g:Expect(v:null).to_be_at_position([line('$'), '$'])
    End
    It moves backward using 'ge' from the last line
      normal! G$
      call s:moveWhole('ge')
      " extra move
      execute "normal \<Plug>(craftyjump-word-ge)"
      call g:Expect(v:null).to_be_at_position([1, '0'])
    End
  End
  Context in visual mode (when &selection is 'inclusive')
    Before all
      set selection=inclusive
    End
    After all
      call g:Expect(&selection).to_equal('inclusive')
      set selection&
    End
    Context characterwise - v
      After
        call g:Expect(mode()).to_equal('v')
      End
      It 'w'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('w', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:false)
      End
      It 'e'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('e', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:false)
      End
    End
    Context linewise - V
      After
        call g:Expect(mode()).to_equal('V')
      End
      It 'w'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('w', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:false)
      End
      It 'e'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('e', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:false)
      End
    End
    Context blockwise - <C-v>
      After
        call g:Expect(mode()).to_equal("\<C-v>")
      End
      It 'w'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('w', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:false)
      End
      It 'e'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('e', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:false)
      End
    End
  End
  Context in visual mode (when &selection is 'exclusive')
    Before all
      set selection=exclusive
    End
    After all
      call g:Expect(&selection).to_equal('exclusive')
      set selection&
    End
    Context characterwise - v
      After
        call g:Expect(mode()).to_equal('v')
      End
      It 'w'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('w', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:true)
      End
      It 'e'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('e', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:true)
      End
    End
    Context linewise - V
      After
        call g:Expect(mode()).to_equal('V')
      End
      It 'w'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('w', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:true)
      End
      It 'e'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('e', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:true)
      End
    End
    Context blockwise - <C-v>
      After
        call g:Expect(mode()).to_equal("\<C-v>")
      End
      It 'w'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('w', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:true)
      End
      It 'e'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('e', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:true)
      End
    End
  End
End

Context motions are used after operators
  Before
    " use lines 8 to 16
    call InitTestBuffer(s:samplelines[7 : 15])
  End
  function! s:dotrepeat(expect)
    normal! .
    call g:Expect(getline('.')).to_equal(a:expect)
  endfunction
  Context d{motion} - delete words
    It 'dw' (exclusive)
      normal! gg0
      " delete a word and repeat
      execute "normal d\<Plug>(craftyjump-word-w)"
      call g:Expect(getline('.')).to_equal('keyword')
      call s:dotrepeat('')
      call s:dotrepeat('keyword ... [non-keyword]')
      call s:dotrepeat('non-keyword]')
      call s:dotrepeat('keyword]')
      call s:dotrepeat('')
      call s:dotrepeat('non-keyword] ... keyword')
      call s:dotrepeat('keyword] ... keyword')
      call s:dotrepeat('keyword')
      call s:dotrepeat('')
      call s:dotrepeat('non-keyword] ... [non-keyword]')
      call s:dotrepeat('keyword] ... [non-keyword]')
      call s:dotrepeat('non-keyword]')
      call s:dotrepeat('keyword]')
      call s:dotrepeat('')
      " next paragraph
      call s:dotrepeat('keyword ... keyword  ')
      " delete 2 words and repeat
      execute "normal d2\<Plug>(craftyjump-word-w)"
      call g:Expect(getline('.')).to_equal('  ')
      call s:dotrepeat('non-keyword]  ')
      call s:dotrepeat('  ')
      call s:dotrepeat('keyword] ... keyword  ')
      call s:dotrepeat('  ')
      call s:dotrepeat('keyword] ... [non-keyword]  ')
      call s:dotrepeat('keyword]  ')
    End
    It 'db' (exclusive)
      normal! G$
      " delete a word and repeat
      execute "normal d\<Plug>(craftyjump-word-b)"
      call g:Expect(getline('.')).to_equal('  [non-keyword] ... [non- ')
      call s:dotrepeat('  [non-keyword] ... [ ')
      call s:dotrepeat('  [non- ')
      call s:dotrepeat('  [ ')
      call s:dotrepeat('   ')
      call s:dotrepeat('  [non-keyword] ...  ')
      call s:dotrepeat('  [non- ')
      call s:dotrepeat('  [ ')
      call s:dotrepeat('   ')
      call s:dotrepeat('  keyword ... [non- ')
      call s:dotrepeat('  keyword ... [ ')
      call s:dotrepeat('   ')
      call s:dotrepeat('  keyword ...  ')
      call s:dotrepeat('   ')
      " previous paragraph
      call s:dotrepeat('[non-keyword] ... [non- ')
      " delete 2 words and repeat
      execute "normal d2\<Plug>(craftyjump-word-b)"
      call g:Expect(getline('.')).to_equal('[non- ')
      call s:dotrepeat(' ')
      call s:dotrepeat('[non- ')
      call s:dotrepeat(' ')
      call s:dotrepeat('keyword ... [ ')
      call s:dotrepeat('keyword ...  ')
    End
    It 'de' (inclusive)
      normal! gg0
      " delete a word and repeat
      execute "normal d\<Plug>(craftyjump-word-e)"
      call g:Expect(getline('.')).to_equal(' ... keyword')
      call s:dotrepeat('')
      call s:dotrepeat(' ... [non-keyword]')
      call s:dotrepeat('-keyword]')
      call s:dotrepeat(']')
      call s:dotrepeat('-keyword] ... keyword')
      call s:dotrepeat('] ... keyword')
      call s:dotrepeat('')
      call s:dotrepeat('-keyword] ... [non-keyword]')
      call s:dotrepeat('] ... [non-keyword]')
      call s:dotrepeat('-keyword]')
      call s:dotrepeat(']')
      " next paragraph
      call s:dotrepeat(' ... keyword  ')
      " delete 2 words and repeat
      execute "normal d2\<Plug>(craftyjump-word-e)"
      call g:Expect(getline('.')).to_equal(' ... [non-keyword]  ')
      call s:dotrepeat(']  ')
      call s:dotrepeat('] ... keyword  ')
      call s:dotrepeat('-keyword] ... [non-keyword]  ')
      call s:dotrepeat('-keyword]  ')
    End
    It 'dge' (inclusive)
      normal! G$
      " delete a word and repeat
      execute "normal d\<Plug>(craftyjump-word-ge)"
      call g:Expect(getline('.')).to_equal('  [non-keyword] ... [non-keywor')
      call s:dotrepeat('  [non-keyword] ... [no')
      call s:dotrepeat('  [non-keywor')
      call s:dotrepeat('  [no')
      call s:dotrepeat('  ')
      call s:dotrepeat('  [non-keyword] ... keywor')
      call s:dotrepeat('  [non-keywor')
      call s:dotrepeat('  [no')
      call s:dotrepeat('  ')
      call s:dotrepeat('  keyword ... [non-keywor')
      call s:dotrepeat('  keyword ... [no')
      call s:dotrepeat('  keywor')
      call s:dotrepeat('  ')
      call s:dotrepeat('  keyword ... keywor')
      call s:dotrepeat('  keywor')
      call s:dotrepeat('  ')
      " previous paragraph
      call s:dotrepeat('[non-keyword] ... [non-keywor')
      " delete 2 words and repeat
      execute "normal d2\<Plug>(craftyjump-word-ge)"
      call g:Expect(getline('.')).to_equal('[non-keywor')
      call s:dotrepeat('')
      call s:dotrepeat('[non-keywor')
      call s:dotrepeat('')
      call s:dotrepeat('keyword ... [no')
      call s:dotrepeat('')
      call s:dotrepeat('keywor')
    End
  End
  Context c{motion} - change words
    " after exiting insert mode, the cursor position shifts one to the left
    It 'cw' (special case `WORD`)
      normal! gg0
      " change a word and repeat
      execute "normal c\<Plug>(craftyjump-word-w)\<Esc>"
      call g:Expect(getline('.')).to_equal(' keyword')
      call s:dotrepeat('keyword')
      call s:dotrepeat('')
      call s:dotrepeat('keyword ... [non-keyword]')
      call s:dotrepeat(' [non-keyword]')
      call s:dotrepeat('non-keyword]')
      call s:dotrepeat('keyword]')
      call s:dotrepeat('')
      call s:dotrepeat('non-keyword] ... keyword')
      call s:dotrepeat('keyword] ... keyword')
      call s:dotrepeat(' keyword')
      call s:dotrepeat('keyword')
      call s:dotrepeat('')
      call s:dotrepeat('non-keyword] ... [non-keyword]')
      call s:dotrepeat('keyword] ... [non-keyword]')
      call s:dotrepeat(' [non-keyword]')
      call s:dotrepeat('non-keyword]')
      call s:dotrepeat('keyword]')
      call s:dotrepeat('')
      " next paragraph
      call s:dotrepeat('keyword ... keyword  ')
      " change 2 words and repeat
      execute "normal c2\<Plug>(craftyjump-word-w)\<Esc>"
      call g:Expect(getline('.')).to_equal('  ')
      call s:dotrepeat('non-keyword]  ')
      call s:dotrepeat('  ')
      call s:dotrepeat('keyword] ... keyword  ')
      call s:dotrepeat('  ')
      call s:dotrepeat('keyword] ... [non-keyword]  ')
      call s:dotrepeat('keyword]  ')
    End
    It 'cb' (exclusive)
      normal! G$
      " change a word and repeat
      execute "normal c\<Plug>(craftyjump-word-b)\<Esc>"
      call g:Expect(getline('.')).to_equal('  [non-keyword] ... [non- ')
      call s:dotrepeat('  [non-keyword] ... [- ')
      call s:dotrepeat('  [non-[- ')
      call s:dotrepeat('  [-[- ')
      call s:dotrepeat('  [non-keyword] ... [-[- ')
      call s:dotrepeat('  [non- [-[- ')
      call s:dotrepeat('  [- [-[- ')
      call s:dotrepeat('  keyword ... [non-[- [-[- ')
      call s:dotrepeat('  keyword ... [-[- [-[- ')
      call s:dotrepeat('  [-[- [-[- ')
      call s:dotrepeat('  keyword ...  [-[- [-[- ')
      call s:dotrepeat('    [-[- [-[- ')
      " previous paragraph
      call s:dotrepeat('[non-keyword] ... [non-   [-[- [-[- ')
      " change 2 words and repeat
      execute "normal c2\<Plug>(craftyjump-word-b)\<Esc>"
      call g:Expect(getline('.')).to_equal('[non--   [-[- [-[- ')
      call s:dotrepeat('--   [-[- [-[- ')
      call s:dotrepeat('[non---   [-[- [-[- ')
      call s:dotrepeat('---   [-[- [-[- ')
      call s:dotrepeat('keyword ... [---   [-[- [-[- ')
      call s:dotrepeat('keyword ... [---   [-[- [-[- ')
    End
    It 'ce' (inclusive)
      normal! gg0
      " change a word and repeat
      execute "normal c\<Plug>(craftyjump-word-e)\<Esc>"
      call g:Expect(getline('.')).to_equal(' ... keyword')
      call s:dotrepeat('')
      call s:dotrepeat(' ... [non-keyword]')
      call s:dotrepeat('-keyword]')
      call s:dotrepeat(']')
      call s:dotrepeat('-keyword] ... keyword')
      call s:dotrepeat('] ... keyword')
      call s:dotrepeat('')
      call s:dotrepeat('-keyword] ... [non-keyword]')
      call s:dotrepeat('] ... [non-keyword]')
      call s:dotrepeat('-keyword]')
      call s:dotrepeat(']')
      " next paragraph
      call s:dotrepeat(' ... keyword  ')
      " change 2 words and repeat
      execute "normal c2\<Plug>(craftyjump-word-e)\<Esc>"
      call g:Expect(getline('.')).to_equal(' ... [non-keyword]  ')
      call s:dotrepeat(']  ')
      call s:dotrepeat('] ... keyword  ')
      call s:dotrepeat('-keyword] ... [non-keyword]  ')
      call s:dotrepeat('-keyword]  ')
    End
    It 'cge' (inclusive)
      normal! G$
      " change a word and repeat
      execute "normal c\<Plug>(craftyjump-word-ge)\<Esc>"
      call g:Expect(getline('.')).to_equal('  [non-keyword] ... [non-keywor')
      call s:dotrepeat('  [non-keyword] ... [no')
      call s:dotrepeat('  [non-keywor')
      call s:dotrepeat('  [no')
      call s:dotrepeat('  ')
      call s:dotrepeat('  [non-keyword] ... keywor')
      call s:dotrepeat('  [non-keywor')
      call s:dotrepeat('  [no')
      call s:dotrepeat('  ')
      call s:dotrepeat('  keyword ... [non-keywor')
      call s:dotrepeat('  keyword ... [no')
      call s:dotrepeat('  keywor')
      call s:dotrepeat('  ')
      call s:dotrepeat('  keyword ... keywor')
      call s:dotrepeat('  keywor')
      call s:dotrepeat('  ')
      " previous paragraph
      call s:dotrepeat('[non-keyword] ... [non-keywor')
      " change 2 words and repeat
      execute "normal c2\<Plug>(craftyjump-word-ge)\<Esc>"
      call g:Expect(getline('.')).to_equal('[non-keywor')
      call s:dotrepeat('')
      call s:dotrepeat('[non-keywor')
      call s:dotrepeat('')
      call s:dotrepeat('keyword ... [no')
      call s:dotrepeat('')
      call s:dotrepeat('keywor')
    End
  End
End

End
