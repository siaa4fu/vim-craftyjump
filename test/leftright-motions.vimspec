scriptencoding utf-8
" the text 'themis#suite()' is required to run test#viml#themis#test_file()
Describe leftright-motions

let s:expect = function(themis#helper('expect'))
let s:samplelines = readfile('test/sample_for_leftright_motions')
" the signs in the sample text indicate types of cursor movements as follows
"   # - the cursor normally goes to the signed position
"   + - in visual mode, the cursor always goes to just after the signed position
"   * - if the cursor is at the end of the exclusive selection, it goes to just after the signed position
"       if not, to the signed position

Context motions simply move the cursor
  function! s:getIndices(line, motion, isForward, isExSelEnd)
    " @param {string} line
    " @param {'home' | 'end'} motion
    " @param {bool} isForward - return indices if the motion is forward, reversed indices if backward
    " @param {bool} isExSelEnd - whether the cursor is the end of the exclusive selection
    " @return {list<number>} - character indices of first or last characters
    let indices = []
    let Put = function(a:isForward ? 'add' : 'insert', [indices])
    let ptn = '[#+*]'
    let currenttype = mode() =~# "[vV\<C-v>]" ? a:isExSelEnd ? '*' : '+' : '#'
    let pos = matchstrpos(a:line, ptn) " 0-based byte index
    while pos[0] !=# ''
      " matchstrpos(...)[1] gives the 0-based byte index of the starting position of the match
      call Put(charidx(a:line, pos[1]) + (pos[0] !=# '#' && pos[0] ==# currenttype ? 1 : 0) + 1) " convert 0-based character index to 1-based character index
      let pos = matchstrpos(a:line, ptn, pos[2])
    endwhile
    return indices
  endfunction
  function! s:moveInLine(lnum, motion, isInitialLine, isExSelEnd)
    " @param {number} lnum - move in the line with the specified line number
    " @param {'home' | 'end'} motion
    " @param {bool} isInitialLine - skip the initial position even if it is a keyword character
    " @param {bool} isExSelEnd - whether the cursor is the end of the exclusive selection
    " @return {number} - next line number
    let isForward = a:motion ==# 'end'
    let line = getline(a:lnum)
    " skip if the line is blank
    if line !=# ''
      " get the line indicating where the cursor is expected to move corresponding to the current line
      " positions of first characters start on line 5, ones of last characters starts on line 9
      let positionline = s:samplelines[a:lnum + (a:motion ==# 'home' ? 4 : 8) - 1]
      let indices = s:getIndices(positionline, a:motion, isForward, a:isExSelEnd)
      if isForward
        " skip the initial position
        if a:isInitialLine && get(indices, 0, -1) == 1 | let indices = indices[1 :] | endif
      else
        " skip the initial position
        if a:isInitialLine && get(indices, 0, -1) == strcharlen(line) | let indices = indices[1 :] | endif
      endif
      for index in indices
        execute "normal \<Plug>(craftyjump-" . a:motion . ')'
        call s:expect(v:null).to_be_at_position([a:lnum, index])
      endfor
    endif
    return a:lnum + (isForward ? 1 : -1)
  endfunction
  def s:moveWhole(motion: string, isExSelEnd = v:false)
    # move forward from the current position to the end of the buffer, or backward to the start
    # @param {'home' | 'end'} motion
    # @param {bool=} isExSelEnd - whether the cursor is the end of the exclusive selection
    const isForward = motion ==# 'end'
    const NotAtBufferEdge = isForward ? (lnum) => lnum <= line('$') : (lnum) => lnum > 0
    var lnum = s:moveInLine(line('.'), motion, v:true, isExSelEnd)
    while NotAtBufferEdge(lnum)
      execute 'normal!' (isForward ? 'gjg0' : 'gkg$')
      lnum = s:moveInLine(lnum, motion, v:false, isExSelEnd)
    endwhile
  enddef
  Context in normal mode
    Before
      " use line 1 to 3
      call InitTestBuffer(s:samplelines[0 : 2])
    End
    It moves backward using 'home' from the last line
      normal! G$
      call s:moveWhole('home')
    End
    It moves forward using 'end' from the first line
      normal! gg0
      call s:moveWhole('end')
    End
  End
  Context in visual mode
    Before
      " use line 1 to 3
      call InitTestBuffer(s:samplelines[0 : 2])
    End
    Context [v] characterwise (inclusive)
      Before
        set selection=inclusive
      End
      After
        call s:expect(&selection).to_equal('inclusive')
        call s:expect(mode()).to_equal('v')
      End
      It 'home'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('home', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('home', v:false)
      End
      It 'end'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('end', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('end', v:false)
      End
    End
    Context [v] characterwise (exclusive)
      Before
        set selection=exclusive
      End
      After
        call s:expect(&selection).to_equal('exclusive')
        call s:expect(mode()).to_equal('v')
      End
      It 'home'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('home', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('home', v:true)
      End
      It 'end'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('end', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('end', v:false)
      End
    End
    Context [V] linewise (inclusive)
      Before
        set selection=inclusive
      End
      After
        call s:expect(&selection).to_equal('inclusive')
        call s:expect(mode()).to_equal('V')
      End
      It 'home'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('home', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('home', v:false)
      End
      It 'end'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('end', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('end', v:false)
      End
    End
    Context [V] linewise (exclusive)
      Before
        set selection=exclusive
      End
      After
        call s:expect(&selection).to_equal('exclusive')
        call s:expect(mode()).to_equal('V')
      End
      It 'home'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('home', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('home', v:true)
      End
      It 'end'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('end', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('end', v:false)
      End
    End
    Context [<C-v>] blockwise (inclusive)
      Before
        set selection=inclusive
      End
      After
        call s:expect(&selection).to_equal('inclusive')
        call s:expect(mode()).to_equal("\<C-v>")
      End
      It 'home'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('home', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('home', v:false)
      End
      It 'end'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('end', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('end', v:false)
      End
    End
    Context [<C-v>] blockwise (exclusive)
      Before
        set selection=exclusive
      End
      After
        call s:expect(&selection).to_equal('exclusive')
        call s:expect(mode()).to_equal("\<C-v>")
      End
      It 'home'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('home', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('home', v:true)
      End
      It 'end'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('end', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('end', v:false)
      End
    End
  End
End

Context motions are used after operators
  Before
    " use line 1 to 3
    call InitTestBuffer(s:samplelines[0 : 2])
  End
  function! s:dotrepeat(expect)
    normal! .
    call s:expect(getline('.')).to_equal(a:expect)
  endfunction
  Context d{motion} - delete words
    It 'd<home>' (exclusive)
      normal! G$
      " delete to first characters and repeat
      execute "normal d\<Plug>(craftyjump-home)"
      call s:expect(getline('.')).to_equal(' ')
      call s:dotrepeat('')
      " previous line
      execute "normal d2\<Plug>(craftyjump-home)"
      call s:expect(getline('.')).to_equal('     ')
      execute "normal d\<Plug>(craftyjump-home)"
      call s:expect(getline('.')).to_equal(' ')
      call s:dotrepeat('')
      " previous line
      execute "normal d2\<Plug>(craftyjump-home)"
      call s:expect(getline('.')).to_equal('          ')
      execute "normal d\<Plug>(craftyjump-home)"
      call s:expect(getline('.')).to_equal(' ')
      call s:dotrepeat('')
    End
    It 'd<end>' (inclusive)
      normal! gg0
      " delete to last characters and repeat
      execute "normal d\<Plug>(craftyjump-end)"
      call s:expect(getline('.')).to_equal('')
      " next line
      execute "normal d2\<Plug>(craftyjump-end)"
      call s:expect(getline('.')).to_equal('     ')
      execute "normal d\<Plug>(craftyjump-end)"
      call s:expect(getline('.')).to_equal('')
      " next line
      execute "normal d2\<Plug>(craftyjump-end)"
      call s:expect(getline('.')).to_equal('          ')
      execute "normal d\<Plug>(craftyjump-end)"
      call s:expect(getline('.')).to_equal('')
    End
  End
  Context c{motion} - change words
    " after exiting insert mode, the cursor position shifts one to the left
    It 'c<Home>' (exclusive)
      normal! G$
      " change to first characters and repeat
      execute "normal c\<Plug>(craftyjump-home)\<Esc>"
      call s:expect(getline('.')).to_equal(' ')
      call s:dotrepeat('')
      " previous line
      execute "normal c2\<Plug>(craftyjump-home)\<Esc>"
      call s:expect(getline('.')).to_equal('     ')
      execute "normal c\<Plug>(craftyjump-home)\<Esc>"
      call s:expect(getline('.')).to_equal(' ')
      call s:dotrepeat('')
      " change 2 words and repeat
      execute "normal c2\<Plug>(craftyjump-home)\<Esc>"
      call s:expect(getline('.')).to_equal('          ')
      execute "normal c\<Plug>(craftyjump-home)\<Esc>"
      call s:expect(getline('.')).to_equal(' ')
      call s:dotrepeat('')
    End
    It 'c<end>' (inclusive)
      normal! gg0
      " change to last characters and repeat
      execute "normal c\<Plug>(craftyjump-end)\<Esc>"
      call s:expect(getline('.')).to_equal('')
      " next line
      execute "normal c2\<Plug>(craftyjump-end)\<Esc>"
      call s:expect(getline('.')).to_equal('     ')
      execute "normal c\<Plug>(craftyjump-end)\<Esc>"
      call s:expect(getline('.')).to_equal('')
      " next line
      execute "normal c2\<Plug>(craftyjump-end)\<Esc>"
      call s:expect(getline('.')).to_equal('          ')
      execute "normal c\<Plug>(craftyjump-end)\<Esc>"
      call s:expect(getline('.')).to_equal('')
    End
  End
End

End
