scriptencoding utf-8
" the text 'themis#suite()' is required to run test#viml#themis#test_file()
Describe wiw-motions

let s:samplelines = readfile('test/wiw_motions.sample')

Context motions simply move the cursor
  Before
    " use line 1 to 3
    call InitTestBuffer(s:samplelines[0 : 2])
  End
  def s:moveWhole(motion: string, isExSelEnd = v:false)
    # move forward from the current position to the end of the buffer, or backward to the start
    # @param {'w' | 'b' | 'e' | 'ge'} motion
    # @param {bool=} isExSelEnd - whether the cursor is at the end of the exclusive selection
    const isForward = motion ==# 'w' || motion ==# 'e'
    const keyToMove = "\<Plug>(craftyjump-wiw-" .. motion .. ')'
    const GetIndices = (lnum, skipInitPos) => {
      const offset_to_posline = {w: 4, b: 4, e: 8, ge: 12}[motion] - 1
      return g:GetIndices(s:samplelines[lnum + offset_to_posline], isForward, isExSelEnd, skipInitPos)
    }
    const NotAtBufferEdge = isForward ? (lnum) => lnum <= line('$') : (lnum) => lnum > 0
    var lnum = line('.')
    lnum = g:MoveInLine(lnum, GetIndices(lnum, v:true), keyToMove, isForward)
    while NotAtBufferEdge(lnum)
      lnum = g:MoveInLine(lnum, GetIndices(lnum, v:false), keyToMove, isForward)
    endwhile
  enddef
  Context in normal mode
    It moves forward using 'w' from the first line
      normal! gg0
      call s:moveWhole('w')
    End
    It moves backward using 'b' from the last line
      normal! G$
      call s:moveWhole('b')
    End
    It moves forward using 'e' from the first line
      normal! gg0
      call s:moveWhole('e')
    End
    It moves backward using 'ge' from the last line
      normal! G$
      call s:moveWhole('ge')
    End
  End
  Context in visual mode (when &selection is 'inclusive')
    Before all
      set selection=inclusive
    End
    After all
      call g:Expect(&selection).to_equal('inclusive')
      set selection&
    End
    Context characterwise - v
      After
        call g:Expect(mode()).to_equal('v')
      End
      It 'w'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('w', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:false)
      End
      It 'e'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('e', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:false)
      End
    End
    Context linewise - V
      After
        call g:Expect(mode()).to_equal('V')
      End
      It 'w'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('w', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:false)
      End
      It 'e'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('e', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:false)
      End
    End
    Context blockwise - <C-v>
      After
        call g:Expect(mode()).to_equal("\<C-v>")
      End
      It 'w'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('w', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:false)
      End
      It 'e'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('e', v:false)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:false)
      End
    End
  End
  Context in visual mode (when &selection is 'exclusive')
      Before all
        set selection=exclusive
      End
      After all
        call g:Expect(&selection).to_equal('exclusive')
        set selection&
      End
    Context characterwise - v
      After
        call g:Expect(mode()).to_equal('v')
      End
      It 'w'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('w', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:true)
      End
      It 'e'
        " move the end of the selection
        normal! gg0v
        call s:moveWhole('e', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$v
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:true)
      End
    End
    Context linewise - V
      After
        call g:Expect(mode()).to_equal('V')
      End
      It 'w'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('w', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:true)
      End
      It 'e'
        " move the end of the selection
        normal! gg0V
        call s:moveWhole('e', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        normal! G$V
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:true)
      End
    End
    Context blockwise - <C-v>
      After
        call g:Expect(mode()).to_equal("\<C-v>")
      End
      It 'w'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('w', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('w', v:false)
      End
      It 'b'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('b', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('b', v:true)
      End
      It 'e'
        " move the end of the selection
        execute "normal! gg0\<C-v>"
        call s:moveWhole('e', v:true)
        " move the start of the selection
        normal! o
        call s:moveWhole('e', v:false)
      End
      It 'ge'
        " move the start of the selection
        execute "normal! G$\<C-v>"
        call s:moveWhole('ge', v:false)
        " move the end of the selection
        normal! o
        call s:moveWhole('ge', v:true)
      End
    End
  End
End

Context motions are used after operators
  Before
    " use line 1 to 3
    call InitTestBuffer(s:samplelines[0 : 2])
  End
  Context d{motion} - delete words
    It 'dw' (exclusive)
      normal! gg0
      " delete a word in a word and repeat
      execute "normal d\<Plug>(craftyjump-wiw-w)"
      call g:Expect(getline('.')).to_equal('TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('two-words TWO-WORDS Two-Words')
      call g:DotRepeat('words TWO-WORDS Two-Words')
      call g:DotRepeat('TWO-WORDS Two-Words')
      call g:DotRepeat('WORDS Two-Words')
      call g:DotRepeat('Two-Words')
      call g:DotRepeat('Words')
      " next line
      call g:DotRepeat('a1aa1aaaBBBBBaaa1aa1a')
      call g:DotRepeat('aa1aaaBBBBBaaa1aa1a')
      call g:DotRepeat('aaaBBBBBaaa1aa1a')
      call g:DotRepeat('BBBBBaaa1aa1a')
      call g:DotRepeat('Baaa1aa1a')
      call g:DotRepeat('aa1a')
      call g:DotRepeat('a')
      " next line
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      " delete 2 words in a word and repeat
      execute "normal d2\<Plug>(craftyjump-wiw-w)"
      call g:Expect(getline('.')).to_equal('twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('two-words TWO-WORDS Two-Words')
      call g:DotRepeat('TWO-WORDS Two-Words')
      call g:DotRepeat('Two-Words')
    End
    It 'db' (exclusive)
      normal! G$
      " delete a word in a word and repeat
      execute "normal d\<Plug>(craftyjump-wiw-b)"
      call g:Expect(getline('.')).to_equal('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords s')
      call g:DotRepeat('twowords TWOWORDS twoWords Twos')
      call g:DotRepeat('twowords TWOWORDS twoWords s')
      call g:DotRepeat('twowords TWOWORDS twos')
      call g:DotRepeat('twowords TWOWORDS s')
      call g:DotRepeat('twowords s')
      call g:DotRepeat('s')
      " previous line
      call g:DotRepeat('a1aa1aaaBBBBBaaa1aa1s')
      call g:DotRepeat('a1aa1aaaBBBBBaaa1s')
      call g:DotRepeat('a1aa1aaaBBBBs')
      call g:DotRepeat('a1aa1aaaBBBs')
      call g:DotRepeat('a1aa1aaaBBs')
      call g:DotRepeat('a1aa1aaaBs')
      call g:DotRepeat('a1aa1aaas')
      call g:DotRepeat('a1aa1s')
      call g:DotRepeat('a1s')
      call g:DotRepeat('s')
      " previous line
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-s')
      " delete 2 words and repeat
      execute "normal d2\<Plug>(craftyjump-wiw-b)"
      call g:Expect(getline('.')).to_equal('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_s')
      call g:DotRepeat('twowords TWOWORDS twoWords Twos')
      call g:DotRepeat('twowords TWOWORDS twos')
      call g:DotRepeat('twowords s')
    End
    It 'de' (inclusive)
      normal! gg0
      " delete a word in a word and repeat
      execute "normal d\<Plug>(craftyjump-wiw-e)"
      call g:Expect(getline('.')).to_equal(' TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' two-words TWO-WORDS Two-Words')
      call g:DotRepeat('-words TWO-WORDS Two-Words')
      call g:DotRepeat(' TWO-WORDS Two-Words')
      call g:DotRepeat('-WORDS Two-Words')
      call g:DotRepeat(' Two-Words')
      call g:DotRepeat('-Words')
      call g:DotRepeat('')
      " next line
      call g:DotRepeat('1aa1aaaBBBBBaaa1aa1a')
      call g:DotRepeat('1aaaBBBBBaaa1aa1a')
      call g:DotRepeat('BBBBBaaa1aa1a')
      call g:DotRepeat('Baaa1aa1a')
      call g:DotRepeat('1aa1a')
      call g:DotRepeat('1a')
      call g:DotRepeat('')
      " next line
      call g:DotRepeat(' TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      " delete 2 words in a word and repeat
      execute "normal d2\<Plug>(craftyjump-wiw-e)"
      call g:Expect(getline('.')).to_equal('Words TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('-words TWO-WORDS Two-Words')
      call g:DotRepeat('-WORDS Two-Words')
      call g:DotRepeat('-Words')
    End
    It 'dge' (inclusive)
      normal! G$
      " delete a word in a word and repeat
      execute "normal d\<Plug>(craftyjump-wiw-ge)"
      call g:Expect(getline('.')).to_equal('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Tw')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORD')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TW')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words tw')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Tw')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS tw')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORD')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TW')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords tw')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWord')
      call g:DotRepeat('twowords TWOWORDS twoWords Tw')
      call g:DotRepeat('twowords TWOWORDS twoWord')
      call g:DotRepeat('twowords TWOWORDS tw')
      call g:DotRepeat('twowords TWOWORD')
      call g:DotRepeat('twoword')
      " previous line
      call g:DotRepeat('a1aa1aaaBBBBBaaa1aa1')
      call g:DotRepeat('a1aa1aaaBBBBBaaa1a')
      call g:DotRepeat('a1aa1aaaBBBBBaa')
      call g:DotRepeat('a1aa1aaaBBB')
      call g:DotRepeat('a1aa1aa')
      call g:DotRepeat('a1a')
      call g:DotRepeat('')
      " previous line
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Word')
      " delete 2 words and repeat
      execute "normal d2\<Plug>(craftyjump-wiw-ge)"
      call g:Expect(getline('.')).to_equal('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORD')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORD')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWord')
      call g:DotRepeat('twowords TWOWORDS twoWord')
      call g:DotRepeat('twowords TWOWORD')
    End
  End
  Context c{motion} - change words
    " after exiting insert mode, the cursor position shifts one to the left
    It 'cw' (special case `WORD`)
      normal! gg0
      " change a word in a word and repeat
      execute "normal c\<Plug>(craftyjump-wiw-w)\<Esc>"
      call g:Expect(getline('.')).to_equal(' TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' two-words TWO-WORDS Two-Words')
      call g:DotRepeat('two-words TWO-WORDS Two-Words')
      call g:DotRepeat('words TWO-WORDS Two-Words')
      call g:DotRepeat(' TWO-WORDS Two-Words')
      call g:DotRepeat('TWO-WORDS Two-Words')
      call g:DotRepeat('WORDS Two-Words')
      call g:DotRepeat(' Two-Words')
      call g:DotRepeat('Two-Words')
      call g:DotRepeat('Words')
      " next line
      call g:DotRepeat('a1aa1aaaBBBBBaaa1aa1a')
      call g:DotRepeat('aa1aaaBBBBBaaa1aa1a')
      call g:DotRepeat('aaaBBBBBaaa1aa1a')
      call g:DotRepeat('BBBBBaaa1aa1a')
      call g:DotRepeat('Baaa1aa1a')
      call g:DotRepeat('aa1a')
      call g:DotRepeat('a')
      " next line
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      " change 2 words in a word and repeat
      execute "normal c2\<Plug>(craftyjump-wiw-w)\<Esc>"
      call g:Expect(getline('.')).to_equal(' twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('words TWO-WORDS Two-Words')
      call g:DotRepeat('WORDS Two-Words')
      call g:DotRepeat('Words')
    End
    It 'cb' (exclusive)
      normal! G$
      " change a word in a word and repeat
      execute "normal c\<Plug>(craftyjump-wiw-b)\<Esc>"
      call g:Expect(getline('.')).to_equal('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO- -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two- - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords _ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords Two _ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords o _ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS two o _ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS o o _ _ _ _ - - -s')
      call g:DotRepeat('twowords  o o _ _ _ _ - - -s')
      call g:DotRepeat('  o o _ _ _ _ - - -s')
      " previous line
      call g:DotRepeat('a1aa1aaaBBBBBaaa1aa1  o o _ _ _ _ - - -s')
      call g:DotRepeat('a1aa1aaaBBBBBaaa11  o o _ _ _ _ - - -s')
      call g:DotRepeat('a1aa1aaaBBBB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('a1aa1aaaB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('a1aa1aB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('a11aB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('11aB11  o o _ _ _ _ - - -s')
      " previous line
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-11aB11  o o _ _ _ _ - - -s')
      " change 2 words and repeat
      execute "normal c2\<Plug>(craftyjump-wiw-b)\<Esc>"
      call g:Expect(getline('.')).to_equal('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO--11aB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two---11aB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_---11aB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two__---11aB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO___---11aB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two____---11aB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoWords Two____---11aB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('twowords TWOWORDS twoo____---11aB11  o o _ _ _ _ - - -s')
      call g:DotRepeat('twowords oo____---11aB11  o o _ _ _ _ - - -s')
    End
    It 'ce' (inclusive)
      normal! gg0
      " change a word in a word and repeat
      execute "normal c\<Plug>(craftyjump-wiw-e)\<Esc>"
      call g:Expect(getline('.')).to_equal(' TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat(' two-words TWO-WORDS Two-Words')
      call g:DotRepeat('-words TWO-WORDS Two-Words')
      call g:DotRepeat(' TWO-WORDS Two-Words')
      call g:DotRepeat('-WORDS Two-Words')
      call g:DotRepeat(' Two-Words')
      call g:DotRepeat('-Words')
      call g:DotRepeat('')
      " next line
      call g:DotRepeat('1aa1aaaBBBBBaaa1aa1a')
      call g:DotRepeat('1aaaBBBBBaaa1aa1a')
      call g:DotRepeat('BBBBBaaa1aa1a')
      call g:DotRepeat('Baaa1aa1a')
      call g:DotRepeat('1aa1a')
      call g:DotRepeat('1a')
      call g:DotRepeat('')
      " next line
      call g:DotRepeat(' TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      " change 2 words in a word and repeat
      execute "normal c2\<Plug>(craftyjump-wiw-e)\<Esc>"
      call g:Expect(getline('.')).to_equal('Words TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('Words two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_WORDS two_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_Words Two_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('_Words two-words TWO-WORDS Two-Words')
      call g:DotRepeat('-words TWO-WORDS Two-Words')
      call g:DotRepeat('-WORDS Two-Words')
      call g:DotRepeat('-Words')
    End
    It 'cge' (inclusive)
      normal! G$
      " change a word in a word and repeat
      execute "normal c\<Plug>(craftyjump-wiw-ge)\<Esc>"
      call g:Expect(getline('.')).to_equal('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Tw')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORD')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TW')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words tw')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Tw')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS tw')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORD')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TW')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords tw')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWord')
      call g:DotRepeat('twowords TWOWORDS twoWords Tw')
      call g:DotRepeat('twowords TWOWORDS twoWord')
      call g:DotRepeat('twowords TWOWORDS tw')
      call g:DotRepeat('twowords TWOWORD')
      call g:DotRepeat('twoword')
      " previous line
      call g:DotRepeat('a1aa1aaaBBBBBaaa1aa1')
      call g:DotRepeat('a1aa1aaaBBBBBaaa1a')
      call g:DotRepeat('a1aa1aaaBBBBBaa')
      call g:DotRepeat('a1aa1aaaBBB')
      call g:DotRepeat('a1aa1aa')
      call g:DotRepeat('a1a')
      call g:DotRepeat('')
      " previous line
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORDS Two-Word')
      " change 2 words and repeat
      execute "normal d2\<Plug>(craftyjump-wiw-ge)\<Esc>"
      call g:Expect(getline('.')).to_equal('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-words TWO-WORD')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Words two-word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Words Two_Word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORDS two_Word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_words TWO_WORD')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWords two_word')
      call g:DotRepeat('twowords TWOWORDS twoWords TwoWord')
      call g:DotRepeat('twowords TWOWORDS twoWord')
      call g:DotRepeat('twowords TWOWORD')
    End
  End
End

End
